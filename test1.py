import jinja2
import re

# This line tells the template loader where to search for template files
templateLoader = jinja2.FileSystemLoader( searchpath="C:/Users/EVGA/Documents/BIOINFORMATICS/midterm/templates/" )

# This creates your environment and loads a specific template
env = jinja2.Environment(loader=templateLoader)
template = env.get_template('midterm.html')

#open gff file generated by Prodigal
gff3File = open('midterm_sequence.gff', "r")
predictions = dict()
count = 0

#parse gff file
for line in gff3File:
        readLine = line.rstrip()
        if readLine.startswith("#"):
            continue
        else:
            elements = readLine.split("\t")
            predictions[count] = {"seqid":elements[0],
                                  "source":elements[1],
                                  "type":elements[2],
                                  "start":(int(elements[3])),
                                  "end":int(elements[4]),
                                  "score":elements[5],
                                  "strand":elements[6],
                                  "phase":elements[7],
                                  "elements":elements[8],
                                  "matched":"No"}
            count+=1

#open reference genbank file
gb_file = "sequence.gb"
gbFile = open(gb_file, "r")

#create two classes, one to store genes from the genbank file, one to store comparison elements
#that will be compared and used to fill entries
class Gene():
    id = None
    start = None
    end = None
    strand = 1
    
class Comparison():
    id = None
    pStart = None
    pEnd = None
    pStrand = None
    gbStart = None
    gbEnd = None
    gbStrand = None
    match = 'Disagree'

#initialize genbank gene entries list
geneEntries = list()

#parse and fill geneEntries list with protein_id, coordinates, and strand
for line in gbFile:
        readLine = line.rstrip()
        if re.search(" CDS ", readLine):
            gene = Gene()
            for tempLine in gbFile:
                if re.search("protein_id", tempLine):
                    id = re.findall("\w{3}\d{5}\.\d", tempLine)
                    gene.id = "{0}".format(id[0])
                    break
            x = re.split("\s+", readLine)
            temploc = re.findall("\W*", readLine)
            loc = str(x[2])
            if re.search("join", loc):
                loc = re.split("\D+", loc)
                gene2 = Gene()
                gene.start = int(loc[1])
                gene.end = int(loc[4])
                geneEntries.append(gene)
            elif re.search("complement",loc):
                loc = re.split("\D+", loc)
                gene.start = int(loc[1])
                gene.end = int(loc[2])
                gene.strand = -1
                geneEntries.append(gene)
            elif re.search("<",loc):
                loc = re.split("\D+", loc)
                gene.start = int(loc[1])
                gene.end = int(loc[2])
                geneEntries.append(gene)
            else:
                loc = re.split("\D+", loc)
                gene.start = int(loc[0])
                gene.end = int(loc[1])
                geneEntries.append(gene)

#initialize counters and final entry list
exactCount = 0
startCount = 0
endCount = 0
noCount = 0
geneCount = len(geneEntries)
entries = list()

#compare predictions to reference gene list
#add appropriate attributes to comparison class and, if matching, add the class to the final entries list
for entry in range(len(predictions)):
    comparison = Comparison()
    comparison.pStart = int(predictions[entry]['start'])
    comparison.pEnd = int(predictions[entry]['end'])
    comparison.pStrand = predictions[entry]['strand']
    if comparison.pStrand == '+':
        comparison.pStrand = 1
    else:
        comparison.pStrand = -1
    for record in geneEntries:
        comparison.id = record.id
        comparison.gbStart = record.start
        comparison.gbEnd = record.end
        comparison.gbStrand = record.strand
        if comparison.pStart == comparison.gbStart and comparison.pEnd == comparison.gbEnd and comparison.pStrand == comparison.gbStrand:
            if comparison.pStrand == 1 or comparison.gbStrand == 1:
                comparison.match = 'Agree'
            else:
                comparison.match = 'Agree (Complement)'
            exactCount+=1 
            predictions[entry]['matched'] = 'Yes'
            entries.append(comparison)
            break
        elif comparison.pStart == comparison.gbStart and comparison.pEnd != comparison.gbEnd and comparison.pStrand == comparison.gbStrand:
            if comparison.pStrand == 1 or comparison.gbStrand == 1:
                startCount+=1
                comparison.match = '5\'Agree'
            else:
                endCount+=1
                comparison.match = '3\'Agree (Complement)'
            predictions[entry]['matched'] = 'Yes'
            entries.append(comparison)
            break
        elif comparison.pStart != comparison.gbStart and comparison.pEnd == comparison.gbEnd and comparison.pStrand == comparison.gbStrand:
            if comparison.pStrand == 1 or comparison.gbStrand == 1:
                endCount+=1
                comparison.match = '3\'Agree'
            else:
                startCount+=1
                comparison.match = '5\'Agree (Complement)'
            predictions[entry]['matched'] = 'Yes'
            entries.append(comparison)
            break
        else:
            continue

#add predicted genes that have no match to entries list
for entry in predictions:
    if predictions[entry]['matched'] == 'No':
        comparison = Comparison()
        comparison.pStart = predictions[entry]['start']
        comparison.pEnd = predictions[entry]['end']
        comparison.pStrand = predictions[entry]['strand']
        entries.append(comparison)
        noCount+=1

#create a temp entries list so next loop will not get stuck because entries keeps growing
tempEntries = entries

#add known genes that were not matched to entries list
for record in geneEntries:
        found = False
        comparison = Comparison()
        for entry in tempEntries:
            if record.start == entry.gbStart or record.end == entry.gbStart:
                found = True
        if found == False:
            comparison.id, comparison.gbStart, comparison.gbEnd, comparison.gbStrand = record.id, record.start, record.end, record.strand
            entries.append(comparison)

print("Content-Type: text/html\n\n")
print(template.render(entries=entries,
		      exactCount=exactCount, 
		      startCount=startCount, 
		      endCount=endCount, 
		      noCount=noCount, 
		      geneCount=geneCount,
                      totalPredicted=len(predictions),))

gff3File.close()
gbFile.close()
            
